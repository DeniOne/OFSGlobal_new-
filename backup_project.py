import os
import shutil
from datetime import datetime
import logging
import zipfile

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_full_backup():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –ø—Ä–æ–µ–∫—Ç–∞ –≤–∫–ª—é—á–∞—è –∫–æ–¥ –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    backup_dir = "project_backups"
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –±—ç–∫–∞–ø–æ–≤: {backup_dir}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∞—Ä—Ö–∏–≤–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"ofs_project_backup_{timestamp}"
    zip_path = os.path.join(backup_dir, f"{backup_name}.zip")
    
    try:
        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
            excludes = [
                '__pycache__', 
                'node_modules',
                '.git',
                'project_backups',
                '.pytest_cache',
                '.vscode',
                '.idea',
                'venv',
                '.env'
            ]
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º –≤ –ø—Ä–æ–µ–∫—Ç–µ
            for root, dirs, files in os.walk('.'):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                dirs[:] = [d for d in dirs if d not in excludes]
                
                for file in files:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∫—ç—à
                    if file.endswith(('.pyc', '.pyo', '.pyd', '.so')):
                        continue
                        
                    file_path = os.path.join(root, file)
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –ø—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    if any(exclude in file_path for exclude in excludes):
                        continue
                        
                    logger.info(f"–î–æ–±–∞–≤–ª—è—é –≤ –∞—Ä—Ö–∏–≤: {file_path}")
                    zipf.write(file_path)
        
        backup_size = os.path.getsize(zip_path) / (1024 * 1024)  # –†–∞–∑–º–µ—Ä –≤ –ú–ë
        logger.info(f"–ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {zip_path} (–†–∞–∑–º–µ—Ä: {backup_size:.1f} –ú–ë)")
        
        print(f"\nüéâ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÇ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {zip_path}")
        print(f"üì¶ –†–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–∞: {backup_size:.1f} –ú–ë")
        print("\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Å–ø–æ–∫–æ–µ–Ω - –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! üòé")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {str(e)}")
        print(f"\n‚ùå –ë–ª—è—Ç—å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)}")
        return False

if __name__ == "__main__":
    print("üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
    create_full_backup() 