import requests
import json
import time
import random
from faker import Faker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_URL = "http://127.0.0.1:8000"  # Base URL
API_PREFIX = ""  # –î–ª—è full_api –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –ø—Ä–µ—Ñ–∏–∫—Å
fake = Faker('ru_RU')

# –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
DEBUG = True

def debug_print(message):
    if DEBUG:
        print(f"[DEBUG] {message}")

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö

# 1. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
organizations = [
    {
        "name": "–§–æ—Ç–æ–º–∞—Ç—Ä–∏—Ü–∞",
        "code": "photomatrix",
        "description": "–ì–æ–ª–æ–≤–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã",
        "org_type": "holding",
        "is_active": True,
        "parent_id": None,
        "inn": "7715648570",
        "kpp": "771501001",
        "legal_address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 12",
        "physical_address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 12"
    }
]

# –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞, –¥–æ—á–µ—Ä–Ω–∏–µ –∫ –§–æ—Ç–æ–º–∞—Ç—Ä–∏—Ü–µ
legal_entities = [
    {
        "name": "–û–û–û –§–æ—Ç–æ–ø—Ä–æ",
        "code": "photopro",
        "description": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "org_type": "legal_entity",
        "is_active": True,
        "inn": "7702386543",
        "kpp": "770201001",
        "legal_address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 24",
        "physical_address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 24"
    },
    {
        "name": "–û–û–û –§–æ—Ç–æ–°–µ—Ä–≤–∏—Å",
        "code": "photoservice",
        "description": "–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ",
        "org_type": "legal_entity",
        "is_active": True,
        "inn": "7703124568",
        "kpp": "770301001",
        "legal_address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ù–æ–≤—ã–π –ê—Ä–±–∞—Ç, 8",
        "physical_address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ù–æ–≤—ã–π –ê—Ä–±–∞—Ç, 8"
    },
    {
        "name": "–ò–ü –§–æ—Ç–æ–º–∞—Å—Ç–µ—Ä",
        "code": "photomaster",
        "description": "–ú–∞–ª–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤",
        "org_type": "legal_entity",
        "is_active": True,
        "inn": "770301456099",
        "legal_address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°–∞–¥–æ–≤–∞—è, 17",
        "physical_address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°–∞–¥–æ–≤–∞—è, 17"
    }
]

# 2. –õ–æ–∫–∞—Ü–∏–∏
locations = []
for i in range(1, 10):
    locations.append({
        "name": f"–õ–æ–∫–∞—Ü–∏—è {i}",
        "code": f"location{i}",
        "description": f"–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –Ω–æ–º–µ—Ä {i}",
        "org_type": "location",
        "is_active": True,
        "legal_address": f"–≥. {fake.city()}, —É–ª. {fake.street_name()}, {random.randint(1, 100)}",
        "physical_address": f"–≥. {fake.city()}, —É–ª. {fake.street_name()}, {random.randint(1, 100)}"
    })

# 3. –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã/–æ—Ç–¥–µ–ª—ã
divisions = [
    {
        "name": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
        "code": "photo_dept",
        "description": "–û—Å–Ω–æ–≤–Ω–æ–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
        "is_active": True
    },
    {
        "name": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂",
        "code": "sales_dept",
        "description": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
        "is_active": True
    },
    {
        "name": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        "code": "management_dept",
        "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–µ–π",
        "is_active": True
    },
    {
        "name": "–û—Ç–¥–µ–ª —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∏",
        "code": "photo_shooting",
        "description": "–û—Ç–¥–µ–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–π",
        "is_active": True
    },
    {
        "name": "–û—Ç–¥–µ–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        "code": "photo_editing",
        "description": "–û—Ç–¥–µ–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ä–µ—Ç—É—à–∏",
        "is_active": True
    },
    {
        "name": "–û—Ç–¥–µ–ª —Ä–æ–∑–Ω–∏—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂",
        "code": "retail_sales",
        "description": "–û—Ç–¥–µ–ª –ø–æ —Ä–æ–∑–Ω–∏—á–Ω—ã–º –ø—Ä–æ–¥–∞–∂–∞–º",
        "is_active": True
    },
    {
        "name": "–û—Ç–¥–µ–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è",
        "code": "strategic_dev",
        "description": "–û—Ç–¥–µ–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∫–æ–º–ø–∞–Ω–∏–∏",
        "is_active": True
    }
]

# 4. –î–æ–ª–∂–Ω–æ—Å—Ç–∏ (–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
positions = [
    {"name": "–§–æ—Ç–æ–≥—Ä–∞—Ñ", "code": "photographer", "description": "–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ç–æ—Å—ä–µ–º–∫—É"},
    {"name": "–†–µ—Ç—É—à–µ—Ä", "code": "retoucher", "description": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Ä–µ—Ç—É—à–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"},
    {"name": "–ü—Ä–æ–¥–∞–≤–µ—Ü", "code": "sales_person", "description": "–†–∞–±–æ—Ç–∞–µ—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø—Ä–æ–¥–∞–∂–∏"},
    {"name": "–°—Ç–∞—Ä—à–∏–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ", "code": "senior_photographer", "description": "–û–ø—ã—Ç–Ω—ã–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"},
    {"name": "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π", "code": "manager", "description": "–£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–∫–∞—Ü–∏–µ–π –∏–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º"},
    {"name": "–°—Ç–∞–∂–µ—Ä", "code": "intern", "description": "–û–±—É—á–∞–µ—Ç—Å—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏"},
    {"name": "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä", "code": "ceo", "description": "–†—É–∫–æ–≤–æ–¥–∏—Ç –∫–æ–º–ø–∞–Ω–∏–µ–π"},
    {"name": "–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é", "code": "strategic_director", "description": "–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è"},
    {"name": "–£—á—Ä–µ–¥–∏—Ç–µ–ª—å", "code": "founder", "description": "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏"},
    {"name": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞", "code": "dept_head", "description": "–í–æ–∑–≥–ª–∞–≤–ª—è–µ—Ç –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç"},
    {"name": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", "code": "production_specialist", "description": "–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"},
    {"name": "–ü–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞", "code": "sales_assistant", "description": "–ü–æ–º–æ–≥–∞–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏"}
]

# 5. –§—É–Ω–∫—Ü–∏–∏
functions = [
    {"name": "–§–æ—Ç–æ—Å—ä–µ–º–∫–∞", "code": "photo_shooting", "description": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ–±—ä–µ–∫—Ç–æ–≤"},
    {"name": "–û–±—Ä–∞–±–æ—Ç–∫–∞", "code": "photo_editing", "description": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–µ—Ç—É—à—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"},
    {"name": "–ü—Ä–æ–¥–∞–∂–∏", "code": "sales", "description": "–ü—Ä–æ–¥–∞–∂–∞ —É—Å–ª—É–≥ –∏ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏"},
    {"name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º", "code": "hr_management", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º –∫–æ–º–ø–∞–Ω–∏–∏"},
    {"name": "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "code": "strategic_management", "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏"}
]

# 6. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏ –∏ –æ—Ç–¥–µ–ª–∞–º–∏
position_to_division = {
    "–§–æ—Ç–æ–≥—Ä–∞—Ñ": "–û—Ç–¥–µ–ª —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∏",
    "–†–µ—Ç—É—à–µ—Ä": "–û—Ç–¥–µ–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏",
    "–ü—Ä–æ–¥–∞–≤–µ—Ü": "–û—Ç–¥–µ–ª —Ä–æ–∑–Ω–∏—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂",
    "–°—Ç–∞—Ä—à–∏–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ": "–û—Ç–¥–µ–ª —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∏",
    "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    "–°—Ç–∞–∂–µ—Ä": None,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ª—é–±–æ–º –æ—Ç–¥–µ–ª–µ
    "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    "–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é": "–û—Ç–¥–µ–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è",
    "–£—á—Ä–µ–¥–∏—Ç–µ–ª—å": None,
    "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞": None,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ª—é–±–æ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–µ
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
    "–ü–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞": "–û—Ç–¥–µ–ª —Ä–æ–∑–Ω–∏—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂"
}

# 7. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
position_to_function = {
    "–§–æ—Ç–æ–≥—Ä–∞—Ñ": "–§–æ—Ç–æ—Å—ä–µ–º–∫–∞",
    "–†–µ—Ç—É—à–µ—Ä": "–û–±—Ä–∞–±–æ—Ç–∫–∞",
    "–ü—Ä–æ–¥–∞–≤–µ—Ü": "–ü—Ä–æ–¥–∞–∂–∏",
    "–°—Ç–∞—Ä—à–∏–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ": "–§–æ—Ç–æ—Å—ä–µ–º–∫–∞",
    "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º",
    "–°—Ç–∞–∂–µ—Ä": None,
    "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä": "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
    "–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é": "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
    "–£—á—Ä–µ–¥–∏—Ç–µ–ª—å": "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
    "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º",
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞": "–§–æ—Ç–æ—Å—ä–µ–º–∫–∞",
    "–ü–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞": "–ü—Ä–æ–¥–∞–∂–∏"
}

# –°–ª—É–∂–µ–±–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö ID
created_orgs = {}
created_divisions = {}
created_positions = {}
created_functions = {}
created_staff = {}

# –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
test_organization = {
    "name": "–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
    "code": "test_org",
    "description": "–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API",
    "org_type": "legal_entity",
    "is_active": True,
    "inn": "7701234567",
    "kpp": "770101001",
    "legal_address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å",
    "physical_address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å"
}

def test_api():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
    
    endpoints = [
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π
        "/",
        "/organizations/",
        "/divisions/",
        "/staff/",
        "/positions/",
        "/functions/",
    ]
    
    for endpoint in endpoints:
        url = f"{API_URL}{endpoint}"
        try:
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {url}")
            response = requests.get(url)
            print(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                print(f"  –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.text[:100]}...")
            else:
                print(f"  –û—à–∏–±–∫–∞: {response.text[:100]}...")
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞: {str(e)}")
    
    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    try:
        print(f"\n–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API...")
        post_url = f"{API_URL}{API_PREFIX}/organizations/"
        response = requests.post(post_url, json=test_organization)
        print(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code in (200, 201):
            print(f"  –û—Ç–≤–µ—Ç: {response.text}")
            print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    return API_PREFIX

def create_organization(org_data, parent_id=None, api_prefix=""):
    """–°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ API"""
    try:
        if parent_id:
            org_data["parent_id"] = parent_id
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
        url = f"{API_URL}{api_prefix}/organizations/"
        debug_print(f"POST {url} —Å –¥–∞–Ω–Ω—ã–º–∏: {json.dumps(org_data, ensure_ascii=False)}")
        
        response = requests.post(url, json=org_data)
        
        debug_print(f"–û—Ç–≤–µ—Ç: {response.status_code}, {response.text[:200]}...")
        
        if response.status_code in (200, 201):
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org_data['name']}")
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_data['name']}: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return None

def create_division(division_data, org_id, api_prefix=""):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ/–æ—Ç–¥–µ–ª —á–µ—Ä–µ–∑ API"""
    try:
        division_data["organization_id"] = org_id
        
        url = f"{API_URL}{api_prefix}/divisions/"
        debug_print(f"POST {url} —Å –¥–∞–Ω–Ω—ã–º–∏: {json.dumps(division_data, ensure_ascii=False)}")
        
        response = requests.post(url, json=division_data)
        
        debug_print(f"–û—Ç–≤–µ—Ç: {response.status_code}, {response.text[:200]}...")
        
        if response.status_code in (200, 201):
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª: {division_data['name']}")
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞ {division_data['name']}: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞: {str(e)}")
        return None

def create_function(function_data, api_prefix=""):
    """–°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ API"""
    try:
        url = f"{API_URL}{api_prefix}/functions/"
        debug_print(f"POST {url} —Å –¥–∞–Ω–Ω—ã–º–∏: {json.dumps(function_data, ensure_ascii=False)}")
        
        response = requests.post(url, json=function_data)
        
        debug_print(f"–û—Ç–≤–µ—Ç: {response.status_code}, {response.text[:200]}...")
        
        if response.status_code in (200, 201):
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {function_data['name']}")
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ {function_data['name']}: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")
        return None

def create_position(position_data, function_id=None, api_prefix=""):
    """–°–æ–∑–¥–∞—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ API"""
    try:
        if function_id:
            position_data["function_id"] = function_id
        
        url = f"{API_URL}{api_prefix}/positions/"
        debug_print(f"POST {url} —Å –¥–∞–Ω–Ω—ã–º–∏: {json.dumps(position_data, ensure_ascii=False)}")
        
        response = requests.post(url, json=position_data)
        
        debug_print(f"–û—Ç–≤–µ—Ç: {response.status_code}, {response.text[:200]}...")
        
        if response.status_code in (200, 201):
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position_data['name']}")
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ {position_data['name']}: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {str(e)}")
        return None

def create_staff(staff_data, api_prefix=""):
    """–°–æ–∑–¥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ API"""
    try:
        url = f"{API_URL}{api_prefix}/staff/"
        debug_print(f"POST {url} —Å –¥–∞–Ω–Ω—ã–º–∏: {json.dumps(staff_data, ensure_ascii=False)}")
        
        response = requests.post(url, json=staff_data)
        
        debug_print(f"–û—Ç–≤–µ—Ç: {response.status_code}, {response.text[:200]}...")
        
        if response.status_code in (200, 201):
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {staff_data['first_name']} {staff_data['last_name']}")
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {staff_data['first_name']} {staff_data['last_name']}: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {str(e)}")
        return None

def populate_database():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º API –∏ –Ω–∞–π–¥–µ–º —Ä–∞–±–æ—á–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    api_prefix = test_api()
    
    if api_prefix is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ API –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
        return
    
    print(f"\n–ò—Å–ø–æ–ª—å–∑—É–µ–º API –ø—Ä–µ—Ñ–∏–∫—Å: '{api_prefix}'")
    
    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:")
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ–≤–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    main_org = create_organization(organizations[0], api_prefix=api_prefix)
    if not main_org:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ–≤–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        return
    
    created_orgs[main_org["name"]] = main_org["id"]
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
    for entity in legal_entities:
        org = create_organization(entity, parent_id=main_org["id"], api_prefix=api_prefix)
        if org:
            created_orgs[org["name"]] = org["id"]
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π
    for location in locations:
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏ –∫ —Å–ª—É—á–∞–π–Ω–æ–º—É —é—Ä.–ª–∏—Ü—É
        parent_id = random.choice(list(created_orgs.values()))
        org = create_organization(location, parent_id=parent_id, api_prefix=api_prefix)
        if org:
            created_orgs[org["name"]] = org["id"]
    
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:")
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    for func in functions:
        function = create_function(func, api_prefix=api_prefix)
        if function:
            created_functions[function["name"]] = function["id"]
    
    print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤/–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:")
    # 5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤/–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
    for div in divisions:
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—ã –∫ –≥–æ–ª–æ–≤–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        division = create_division(div, main_org["id"], api_prefix=api_prefix)
        if division:
            created_divisions[division["name"]] = division["id"]
    
    print("\n4. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π:")
    # 6. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    for pos in positions:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
        func_name = position_to_function.get(pos["name"])
        func_id = created_functions.get(func_name) if func_name else None
        
        position = create_position(pos, func_id, api_prefix=api_prefix)
        if position:
            created_positions[position["name"]] = position["id"]
    
    print("\n5. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:")
    # 7. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    for _ in range(20):  # –°–æ–∑–¥–∞–¥–∏–º 20 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å
        position_name = random.choice(list(created_positions.keys()))
        position_id = created_positions[position_name]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Å—Ä–µ–¥–∏ —é—Ä.–ª–∏—Ü –∏ –ª–æ–∫–∞—Ü–∏–π
        orgs = {k: v for k, v in created_orgs.items() if "–§–æ—Ç–æ–º–∞—Ç—Ä–∏—Ü–∞" not in k}  # –ò—Å–∫–ª—é—á–∞–µ–º –≥–æ–ª–æ–≤–Ω—É—é
        org_name = random.choice(list(orgs.keys()))
        org_id = orgs[org_name]
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é
        div_name = position_to_division.get(position_name)
        if div_name and div_name in created_divisions:
            division_id = created_divisions[div_name]
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∏–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ
            division_id = random.choice(list(created_divisions.values()))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        first_name = fake.first_name()
        last_name = fake.last_name()
        
        # API –æ–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–±–∏—Ç–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è
        staff_data = {
            "first_name": first_name,
            "last_name": last_name,
            "email": fake.email(),
            "phone": fake.phone_number(),
            "organization_id": org_id,
            "is_active": True
        }
        
        staff = create_staff(staff_data, api_prefix=api_prefix)
        if staff:
            created_staff[f"{first_name} {last_name}"] = staff["id"]
    
    print(f"\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {len(created_orgs)}")
    print(f"   - –û—Ç–¥–µ–ª–æ–≤: {len(created_divisions)}")
    print(f"   - –§—É–Ω–∫—Ü–∏–π: {len(created_functions)}")
    print(f"   - –î–æ–ª–∂–Ω–æ—Å—Ç–µ–π: {len(created_positions)}")
    print(f"   - –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(created_staff)}")

if __name__ == "__main__":
    populate_database() 