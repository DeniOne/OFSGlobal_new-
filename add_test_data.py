"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
"""
import os
import psycopg2
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DB_PARAMS = {
    'dbname': os.getenv('DB_NAME', 'ofs_db_new'),
    'user': os.getenv('DB_USER', 'postgres'),
    'password': os.getenv('DB_PASSWORD', ''),
    'host': os.getenv('DB_HOST', 'localhost')
}

def add_test_data():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    print(f"üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {DB_PARAMS['dbname']}...")
    try:
        conn = psycopg2.connect(
            dbname=DB_PARAMS['dbname'],
            user=DB_PARAMS['user'],
            password=DB_PARAMS['password'],
            host=DB_PARAMS['host']
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä
        cur = conn.cursor()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
        print("üìù –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é '–§–û–¢–û–ú–ê–¢–†–ò–¶–ê'...")
        cur.execute("""
            INSERT INTO organizations (name, legal_name, description, code, org_type, is_active, ckp)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            RETURNING id
        """, ('–§–û–¢–û–ú–ê–¢–†–ò–¶–ê', '–û–û–û "–§–û–¢–û–ú–ê–¢–†–ò–¶–ê"', '–ö–æ–º–ø–∞–Ω–∏—è –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É —Ñ–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏', 'FM-001', 
              'COMMERCIAL', True, '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏'))
        
        org_id = cur.fetchone()[0]
        print(f"‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {org_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        print("üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'...")
        cur.execute("""
            INSERT INTO divisions (name, organization_id, code, is_active, ckp)
            VALUES (%s, %s, %s, %s, %s)
            RETURNING id
        """, ('–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', org_id, 'DIV-DEV', True, '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π —Ñ–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏'))
        
        div_id = cur.fetchone()[0]
        print(f"‚úÖ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {div_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª
        print("üìù –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª '–û—Ç–¥–µ–ª —Ñ–æ—Ç–æ–∫–∞–º–µ—Ä'...")
        cur.execute("""
            INSERT INTO sections (name, division_id, code, is_active, ckp)
            VALUES (%s, %s, %s, %s, %s)
            RETURNING id
        """, ('–û—Ç–¥–µ–ª —Ñ–æ—Ç–æ–∫–∞–º–µ—Ä', div_id, 'SEC-CAM', True, '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–∫–∞–º–µ—Ä'))
        
        sec_id = cur.fetchone()[0]
        print(f"‚úÖ –û—Ç–¥–µ–ª —Å–æ–∑–¥–∞–Ω —Å ID: {sec_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        print("üìù –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é '–§—É–Ω–∫—Ü–∏—è –¥–∏–∑–∞–π–Ω–∞ —Ñ–æ—Ç–æ–∫–∞–º–µ—Ä'...")
        cur.execute("""
            INSERT INTO functions (name, section_id, is_active, ckp)
            VALUES (%s, %s, %s, %s)
            RETURNING id
        """, ('–§—É–Ω–∫—Ü–∏—è –¥–∏–∑–∞–π–Ω–∞ —Ñ–æ—Ç–æ–∫–∞–º–µ—Ä', sec_id, True, '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —ç—Ä–≥–æ–Ω–æ–º–∏—á–Ω—ã—Ö –∏ —Å—Ç–∏–ª—å–Ω—ã—Ö –∫–æ—Ä–ø—É—Å–æ–≤'))
        
        func_id = cur.fetchone()[0]
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {func_id}")
        
        # –î–æ–ª–∂–Ω–æ—Å—Ç—å
        print("üìù –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å '–í–µ–¥—É—â–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä'...")
        cur.execute("""
            INSERT INTO positions (name, description, is_active)
            VALUES (%s, %s, %s)
            RETURNING id
        """, ('–í–µ–¥—É—â–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä', '–í–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –¥–∏–∑–∞–π–Ω—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏', True))
        
        pos_id = cur.fetchone()[0]
        print(f"‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {pos_id}")
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        cur.close()
        conn.close()
        
        print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        if 'conn' in locals():
            conn.rollback()

if __name__ == "__main__":
    add_test_data() 