import pytest
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from ..keyboards import (
    get_main_keyboard,
    get_competencies_keyboard,
    get_divisions_keyboard,
    get_divisions_keyboard,
    get_functions_keyboard,
    get_confirm_keyboard
)

def test_get_main_keyboard():
    """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = get_main_keyboard()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard, InlineKeyboardMarkup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = keyboard.inline_keyboard[0]
    assert len(buttons) == 2
    assert buttons[0].text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
    assert buttons[1].text == "‚ùì –ü–æ–º–æ—â—å"

def test_get_competencies_keyboard():
    """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π"""
    competencies = ["Python", "SQL", "Git"]
    keyboard = get_competencies_keyboard(competencies)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard, InlineKeyboardMarkup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = keyboard.inline_keyboard[0]
    assert len(buttons) == len(competencies)
    for i, comp in enumerate(competencies):
        assert buttons[i].text == comp
        assert buttons[i].callback_data == f"comp_{comp}"

def test_get_divisions_keyboard():
    """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤"""
    divisions = ["IT", "HR", "Finance"]
    keyboard = get_divisions_keyboard(divisions)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard, InlineKeyboardMarkup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = keyboard.inline_keyboard[0]
    assert len(buttons) == len(divisions)
    for i, dept in enumerate(divisions):
        assert buttons[i].text == dept
        assert buttons[i].callback_data == f"dept_{dept}"

def test_get_divisions_keyboard():
    """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–¥–µ–ª–æ–≤"""
    divisions = ["Development", "QA", "DevOps"]
    keyboard = get_divisions_keyboard(divisions)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard, InlineKeyboardMarkup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = keyboard.inline_keyboard[0]
    assert len(buttons) == len(divisions)
    for i, div in enumerate(divisions):
        assert buttons[i].text == div
        assert buttons[i].callback_data == f"div_{div}"

def test_get_functions_keyboard():
    """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π"""
    functions = ["Backend", "Frontend", "Testing"]
    keyboard = get_functions_keyboard(functions)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard, InlineKeyboardMarkup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = keyboard.inline_keyboard[0]
    assert len(buttons) == len(functions)
    for i, func in enumerate(functions):
        assert buttons[i].text == func
        assert buttons[i].callback_data == f"func_{func}"

def test_get_confirm_keyboard():
    """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = get_confirm_keyboard()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert isinstance(keyboard, InlineKeyboardMarkup)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = keyboard.inline_keyboard[0]
    assert len(buttons) == 2
    assert buttons[0].text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    assert buttons[1].text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
    assert buttons[0].callback_data == "confirm_yes"
    assert buttons[1].callback_data == "confirm_no" 