import re
import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from typing import Dict, Any, List
import asyncio

from database import BotDatabase
from states import AdminStates
import keyboards
from api_client import ApiClient
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
db = BotDatabase()
api_client = ApiClient()
config = Config()

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
def is_admin_filter(message: Message) -> bool:
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return db.is_admin(str(message.from_user.id))

def is_superadmin_filter(message: Message) -> bool:
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º"""
    return db.is_superadmin(str(message.from_user.id))

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ ID, –∑–∞—Ç–µ–º –ø–æ username
    is_admin = user_id in config.ADMIN_IDS or f"@{username}" in config.ADMIN_IDS
    
    if not is_admin:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")],
            [KeyboardButton(text="üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞—è–≤–∫–∏"
@router.message(F.text == "üìã –ó–∞—è–≤–∫–∏", is_admin_filter)
async def show_requests(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    requests = db.get_pending_registration_requests()
    
    if not requests:
        await message.answer(
            "üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=keyboards.get_admin_keyboard()
        )
        return
    
    await message.answer(
        f"üìã <b>–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ({len(requests)})</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
        reply_markup=keyboards.get_pending_requests_keyboard(requests)
    )

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
@router.message(F.text == "üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def show_registration_requests(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞)"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await show_requests(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
@router.callback_query(F.data == "refresh_requests")
async def refresh_requests(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
    requests = db.get_pending_registration_requests()
    
    if not requests:
        await callback.message.edit_text(
            "üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        )
        return
    
    await callback.message.edit_text(
        f"üìã <b>–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ({len(requests)})</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
        reply_markup=keyboards.get_pending_requests_keyboard(requests)
    )
    
    await callback.answer("–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ"
@router.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    await callback.message.edit_text(
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboards.get_admin_keyboard()
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
@router.callback_query(F.data.startswith("request_"))
async def select_request(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    request_id = int(callback.data.split("_")[1])
    request = db.get_registration_request(request_id)
    
    if not request:
        await callback.message.edit_text(
            "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏
    username = request.get('telegram_username', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    username_text = f"@{username}" if username and not username.startswith('@') else username
    
    text = (
        f"üìù <b>–ó–∞—è–≤–∫–∞ #{request['id']}</b>\n\n"
        f"<b>Telegram ID:</b> {request['telegram_id']}\n"
        f"<b>Username:</b> {username_text}\n"
        f"<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {request.get('user_full_name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"<b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {request.get('approximate_position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {request['created_at']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboards.get_request_action_keyboard(request_id)
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫"
@router.callback_query(F.data == "back_to_requests")
async def back_to_requests(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫"""
    requests = db.get_pending_registration_requests()
    
    if not requests:
        await callback.message.edit_text(
            "üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        )
        return
    
    await callback.message.edit_text(
        f"üìã <b>–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ({len(requests)})</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
        reply_markup=keyboards.get_pending_requests_keyboard(requests)
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"
@router.callback_query(F.data.startswith("reject_request_"))
async def reject_request(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    request_id = int(callback.data.split("_")[2])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    success = db.process_registration_request(
        request_id=request_id,
        status="rejected",
        admin_id=str(callback.from_user.id)
    )
    
    if not success:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    request = db.get_registration_request(request_id)
    
    await callback.message.edit_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
        reply_markup=keyboards.get_back_to_main_keyboard()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot = callback.bot
    await bot.send_message(
        chat_id=request['telegram_id'],
        text="‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
             "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
             "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.\n\n"
             "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
    )
    
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É"
@router.callback_query(F.data.startswith("approve_request_"))
async def approve_request(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    request_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    request = db.get_registration_request(request_id)
    
    if not request:
        await callback.message.edit_text(
            "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(request_id=request_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –∏–∑ API
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ API
        positions = await api_client.get_positions()
        
        if not positions:
            # –ï—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
            logger.warning("API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏")
            positions = [
                {"id": 1, "name": "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä", "description": "–í—ã—Å—à–µ–µ —Ä—É–∫–æ–≤–æ–¥—è—â–µ–µ –ª–∏—Ü–æ –∫–æ–º–ø–∞–Ω–∏–∏"},
                {"id": 2, "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä", "description": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"},
                {"id": 3, "name": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–º –∫–æ–º–ø–∞–Ω–∏–∏"},
                {"id": 4, "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏"},
                {"id": 5, "name": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è"}
            ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(positions=positions)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        await state.set_state(AdminStates.waiting_for_position_selection)
        
        # –ú–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        await callback.message.edit_text(
            f"üë®‚Äçüíº <b>–í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}</b>\n\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {request.get('user_full_name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {request.get('approximate_position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∑–∞—è–≤–∫–µ:",
            reply_markup=keyboards.get_positions_keyboard(positions, request_id)
        )
        
        # –¢–∞–∫–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–∞—Ç—å
        divisions = await api_client.get_divisions()
        if divisions:
            await state.update_data(divisions=divisions)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboards.get_back_to_request_keyboard(request_id)
        )
        await callback.answer("–û—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
@router.callback_query(StateFilter(AdminStates.waiting_for_position_selection), F.data.startswith("position_"))
async def select_position(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    position_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    request_id = data.get("request_id")
    positions = data.get("positions", [])
    divisions = data.get("divisions", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    request = db.get_registration_request(request_id)
    
    if not request:
        await callback.message.edit_text(
            "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    selected_position = None
    for position in positions:
        if position.get('id') == position_id or str(position.get('id')) == str(position_id):
            selected_position = position
            break
    
    if not selected_position:
        await callback.message.edit_text(
            "‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=keyboards.get_back_to_request_keyboard(request_id)
        )
        await callback.answer("–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        selected_position_id=position_id,
        selected_position_name=selected_position.get('name', selected_position.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å')),
        selected_position=selected_position
    )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª
    if divisions:
        await state.set_state(AdminStates.waiting_for_division_selection)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–¥–µ–ª–∞–º–∏
        await callback.message.edit_text(
            f"üè¢ <b>–í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}</b>\n\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {request.get('user_full_name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
            f"<b>–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {selected_position.get('name', selected_position.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å'))}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
            reply_markup=keyboards.get_api_divisions_keyboard(divisions, request_id)
        )
        
        await callback.answer()
        return
    
    # –ï—Å–ª–∏ –æ—Ç–¥–µ–ª–æ–≤ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    await generate_invitation_code(callback, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞
@router.callback_query(StateFilter(AdminStates.waiting_for_division_selection), F.data.startswith("division_"))
async def select_division(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    division_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    divisions = data.get("divisions", [])
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–¥–µ–ª –≤ —Å–ø–∏—Å–∫–µ
    selected_division = None
    for division in divisions:
        if division.get('id') == division_id or str(division.get('id')) == str(division_id):
            selected_division = division
            break
    
    if not selected_division:
        await callback.answer("–û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–¥–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        selected_division_id=division_id,
        selected_division_name=selected_division.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–¥–µ–ª'),
        selected_division=selected_division
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    await generate_invitation_code(callback, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞
@router.callback_query(StateFilter(AdminStates.waiting_for_division_selection), F.data == "skip_division")
async def skip_division(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    await generate_invitation_code(callback, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == "back_to_position_selection")
async def back_to_position_selection(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    request_id = data.get("request_id")
    positions = data.get("positions", [])
    request = db.get_registration_request(request_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    await state.set_state(AdminStates.waiting_for_position_selection)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    await callback.message.edit_text(
        f"üë®‚Äçüíº <b>–í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {request.get('user_full_name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"<b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {request.get('approximate_position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∑–∞—è–≤–∫–µ:",
        reply_markup=keyboards.get_positions_keyboard(positions, request_id)
    )
    
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
async def generate_invitation_code(callback: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–¥–µ–ª–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    request_id = data.get("request_id")
    request = db.get_registration_request(request_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    selected_position = data.get("selected_position")
    position_id = selected_position.get('id')
    position_name = selected_position.get('name', selected_position.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å'))
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ç–¥–µ–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    selected_division = data.get("selected_division")
    division_id = None
    division_name = "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    if selected_division:
        division_id = selected_division.get('id')
        division_name = selected_division.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–¥–µ–ª')
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è API
    invite_code_data = {
        "position_id": position_id,
        "division_id": division_id,
        "telegram_id": request.get('telegram_id'),
        "user_full_name": request.get('user_full_name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
        "organization_id": 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ API
    api_result = await api_client.generate_invitation_code(invite_code_data)
    
    if api_result.get("success"):
        # –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ API
        invitation_code = api_result.get("code")
        expires_at = api_result.get("expires_at", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ë–î
        db.save_invitation_code(
            request_id=request_id,
            code=invitation_code,
            position_id=position_id,
            position_name=position_name,
            division_id=division_id,
            division_name=division_name,
            expires_at=expires_at
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_invitation_to_user(
            request_id, 
            invitation_code, 
            position_name, 
            division_name if division_id else None
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
        await callback.message.edit_text(
            f"‚úÖ <b>–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}</b>\n\n"
            f"<b>–ö–æ–¥:</b> <code>{invitation_code}</code>\n"
            f"<b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:</b> {expires_at}\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {request.get('user_full_name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
            f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position_name}\n"
            f"<b>–û—Ç–¥–µ–ª:</b> {division_name}\n\n"
            f"–ö–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            reply_markup=keyboards.get_back_to_request_keyboard(request_id)
        )
    else:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ API
        error_message = api_result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è</b>\n\n"
            f"<b>–ó–∞—è–≤–∫–∞:</b> #{request_id}\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {request.get('user_full_name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
            f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position_name}\n"
            f"<b>–û—Ç–¥–µ–ª:</b> {division_name}\n\n"
            f"<b>–û—à–∏–±–∫–∞:</b> {error_message}",
            reply_markup=keyboards.get_back_to_request_keyboard(request_id)
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—è–≤–∫–∏
    db.update_registration_request(request_id, status="approved")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
@router.callback_query(F.data.startswith("back_to_request_"))
async def back_to_request(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏"""
    request_id = int(callback.data.split("_")[3])
    request = db.get_registration_request(request_id)
    
    await state.clear()
    
    if not request:
        await callback.message.edit_text(
            "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏
    username = request.get('telegram_username', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    username_text = f"@{username}" if username and not username.startswith('@') else username
    
    text = (
        f"üìù <b>–ó–∞—è–≤–∫–∞ #{request['id']}</b>\n\n"
        f"<b>Telegram ID:</b> {request['telegram_id']}\n"
        f"<b>Username:</b> {username_text}\n"
        f"<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {request.get('user_full_name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"<b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {request.get('approximate_position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {request['created_at']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboards.get_request_action_keyboard(request_id)
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", is_admin_filter)
async def show_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω–∞"""
    admin_id = str(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∞
    admin_stats = db.get_admin_stats(admin_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    staff = db.get_all_staff()
    requests = db.get_pending_registration_requests()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(staff)}\n"
        f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫: {len(requests)}\n\n"
        f"<b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫: {admin_stats['processed_requests']}\n"
        f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ –∑–∞—è–≤–æ–∫: {admin_stats['approved_requests']}\n"
        f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∑–∞—è–≤–æ–∫: {admin_stats['rejected_requests']}\n"
        f"‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–¥–æ–≤: {admin_stats['generated_codes']}\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–æ–¥–æ–≤: {admin_stats['used_codes']}"
    )
    
    await message.answer(
        text,
        reply_markup=keyboards.get_admin_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"
@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", is_admin_filter)
async def admin_management(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    await message.answer(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboards.get_admin_management_keyboard(),
        parse_mode="HTML"
    )

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
@router.message(F.text == "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def user_management(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
    await admin_management(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"
@router.message(F.text == "üìú –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", is_superadmin_filter)
async def list_admins(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤"""
    admins = db.get_all_admins()
    
    if not admins:
        await message.answer(
            "üì≠ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.",
            reply_markup=keyboards.get_admin_management_keyboard()
        )
        return
    
    await message.answer(
        f"üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ({len(admins)})</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboards.get_admins_list_keyboard(admins)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏"
@router.callback_query(F.data == "back_to_admin_management")
async def back_to_admin_management(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏"""
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboards.get_admin_management_keyboard()
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", is_superadmin_filter)
async def add_admin_start(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    await state.set_state(AdminStates.waiting_for_admin_id)
    
    await message.answer(
        "üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
@router.message(StateFilter(AdminStates.waiting_for_admin_id))
async def process_admin_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    admin_id = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç (ID –∏–ª–∏ username)
    if admin_id.isdigit():
        # –≠—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID
        telegram_id = admin_id
    elif admin_id.startswith('@'):
        # –≠—Ç–æ username - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º, —á—Ç–æ –Ω—É–∂–µ–Ω ID
        await message.answer(
            "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø–æ username –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. "
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
        return
    else:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–¥–º–∏–Ω
    existing_admin = db.get_admin_by_telegram_id(telegram_id)
    if existing_admin and existing_admin['is_active']:
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.",
            reply_markup=keyboards.get_admin_management_keyboard()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(admin_telegram_id=telegram_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
    await state.set_state(AdminStates.waiting_for_admin_name)
    
    await message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
@router.message(StateFilter(AdminStates.waiting_for_admin_name))
async def process_admin_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    admin_name = message.text.strip()
    
    if not admin_name:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∞:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(admin_name=admin_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await state.set_state(AdminStates.waiting_for_admin_confirmation)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    
    await message.answer(
        f"üë§ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞</b>\n\n"
        f"<b>Telegram ID:</b> {data['admin_telegram_id']}\n"
        f"<b>–ò–º—è:</b> {data['admin_name']}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:",
        reply_markup=keyboards.get_confirm_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@router.callback_query(StateFilter(AdminStates.waiting_for_admin_confirmation))
async def confirm_add_admin(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    if callback.data == "confirm":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        success = db.add_admin(
            telegram_id=data['admin_telegram_id'],
            full_name=data['admin_name'],
            created_by=str(callback.from_user.id)
        )
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω—É
            try:
                await callback.bot.send_message(
                    chat_id=data['admin_telegram_id'],
                    text=f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                         f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ OFS Global.\n"
                         f"–î–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω—É: {e}")
            
            await callback.message.edit_text(
                f"‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"<b>Telegram ID:</b> {data['admin_telegram_id']}\n"
                f"<b>–ò–º—è:</b> {data['admin_name']}"
            )
            
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboards.get_admin_management_keyboard()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    else:  # cancel
        await callback.message.edit_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        )
        
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.get_admin_management_keyboard()
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ"
@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ", is_admin_filter)
async def back_to_admin_panel(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    await message.answer(
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –¢—ã –≤–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=keyboards.get_admin_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_from_admin(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=keyboards.get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"
@router.message(F.text == "üßë‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", is_admin_filter)
async def show_staff(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    staff = db.get_all_staff()
    
    if not staff:
        await message.answer(
            "üì≠ –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.",
            reply_markup=keyboards.get_admin_keyboard()
        )
        return
    
    await message.answer(
        f"üë• <b>–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ({len(staff)})</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboards.get_staff_list_keyboard(staff)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"
@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", is_superadmin_filter)
async def remove_admin_start(message: Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    admins = db.get_all_admins()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
    active_admins = [
        admin for admin in admins 
        if admin['is_active'] and str(admin['telegram_id']) != str(message.from_user.id)
    ]
    
    if not active_admins:
        await message.answer(
            "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=keyboards.get_admin_management_keyboard()
        )
        return
    
    await message.answer(
        f"üë• <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboards.get_admins_list_keyboard(active_admins)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
@router.callback_query(F.data.startswith("admin_"))
async def admin_actions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞–¥–º–∏–Ω–æ–º"""
    admin_id = callback.data.split("_")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞
    admin = db.get_admin_by_telegram_id(admin_id)
    
    if not admin:
        await callback.message.edit_text(
            "‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        await callback.answer("–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞
    level = "–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω" if admin['permission_level'] == 2 else "–ê–¥–º–∏–Ω"
    status = "–ê–∫—Ç–∏–≤–µ–Ω" if admin['is_active'] else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    text = (
        f"üë§ <b>–ê–¥–º–∏–Ω: {admin['full_name']}</b>\n\n"
        f"<b>Telegram ID:</b> {admin['telegram_id']}\n"
        f"<b>Username:</b> {admin.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"<b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b> {level}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
        f"<b>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> {admin['created_at']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboards.get_admin_action_keyboard(admin_id)
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–æ–≤"
@router.callback_query(F.data == "back_to_admins_list")
async def back_to_admins_list(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–æ–≤"""
    admins = db.get_all_admins()
    
    await callback.message.edit_text(
        f"üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ({len(admins)})</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboards.get_admins_list_keyboard(admins)
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"
@router.callback_query(F.data.startswith("remove_admin_"))
async def remove_admin(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    admin_id = callback.data.split("_")[2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω —É–¥–∞–ª–∏—Ç—å —Å–∞–º —Å–µ–±—è
    if str(admin_id) == str(callback.from_user.id):
        await callback.message.edit_text(
            "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞
    admin = db.get_admin_by_telegram_id(admin_id)
    
    if not admin:
        await callback.message.edit_text(
            "‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        await callback.answer("–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –æ–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    if admin['permission_level'] == 2 and not db.is_superadmin(str(callback.from_user.id)):
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    success = db.remove_admin(admin_id)
    
    if success:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω—É
        try:
            await callback.bot.send_message(
                chat_id=admin_id,
                text="‚ö†Ô∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
                     "–í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞ OFS Global –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω—É: {e}")
        
        await callback.message.edit_text(
            f"‚úÖ –ê–¥–º–∏–Ω {admin['full_name']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞"
@router.callback_query(F.data.startswith("admin_stats_"))
async def admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    admin_id = callback.data.split("_")[2]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞
    admin = db.get_admin_by_telegram_id(admin_id)
    
    if not admin:
        await callback.message.edit_text(
            "‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        await callback.answer("–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∞
    stats = db.get_admin_stats(admin_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞: {admin['full_name']}</b>\n\n"
        f"<b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫:</b> {stats['processed_requests']}\n"
        f"<b>–û–¥–æ–±—Ä–µ–Ω–æ –∑–∞—è–≤–æ–∫:</b> {stats['approved_requests']}\n"
        f"<b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∑–∞—è–≤–æ–∫:</b> {stats['rejected_requests']}\n"
        f"<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–¥–æ–≤:</b> {stats['generated_codes']}\n"
        f"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–æ–¥–æ–≤:</b> {stats['used_codes']}"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboards.get_admins_list_keyboard(db.get_all_admins())
    )
    
    await callback.answer()

async def send_invitation_to_user(
    request_id: int, 
    invitation_code: str, 
    position_name: str, 
    division_name: str = None
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        request_id: ID –∑–∞—è–≤–∫–∏
        invitation_code: –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        position_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        division_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    request = db.get_registration_request(request_id)
    if not request:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É —Å ID {request_id}")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = (
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
        f"–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
        f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position_name}\n"
    )
    
    if division_name:
        user_message += f"<b>–û—Ç–¥–µ–ª:</b> {division_name}\n\n"
    else:
        user_message += "\n"
    
    user_message += (
        f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n\n"
        f"<code>{invitation_code}</code>\n\n"
        f"–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
    )
    
    try:
        from aiogram import Bot
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot = Bot(token=config.BOT_TOKEN)
        
        await bot.send_message(
            chat_id=request['telegram_id'],
            text=user_message,
            parse_mode="HTML"
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request['telegram_id']}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await bot.session.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request['telegram_id']}: {e}")

def register_admin_handlers(dispatcher: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    dispatcher.include_router(router) 