import re
import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
from database import BotDatabase
import keyboards
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_position = State()
    waiting_for_email = State()
    waiting_for_phone = State()
    waiting_for_telegram = State()
    waiting_for_photo = State()
    waiting_for_competencies = State()
    waiting_for_confirmation = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ OFS Global.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=keyboards.get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìå <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b> –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞\n\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.",
        reply_markup=keyboards.get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer(
            "ü§∑‚Äç‚ôÇÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=keyboards.get_main_keyboard()
        )
        return

    await state.clear()
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=keyboards.get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
@router.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def registration_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    await state.set_state(RegistrationStates.waiting_for_name)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    await state.update_data(name=message.text)
    await state.set_state(RegistrationStates.waiting_for_position)
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
@router.message(StateFilter(RegistrationStates.waiting_for_position))
async def process_position(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    await state.update_data(position=message.text)
    await state.set_state(RegistrationStates.waiting_for_email)
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email
@router.message(StateFilter(RegistrationStates.waiting_for_email))
async def process_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(email_pattern, message.text):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(email=message.text)
    await state.set_state(RegistrationStates.waiting_for_phone)
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 9xx xxx xx xx:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(StateFilter(RegistrationStates.waiting_for_phone))
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = message.text.strip()
    phone_pattern = r'^\+?[0-9]{10,15}$'
    if not re.match(phone_pattern, phone):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(phone=phone)
    await state.set_state(RegistrationStates.waiting_for_telegram)
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π Telegram ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ @nickname:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ telegram ID
@router.message(StateFilter(RegistrationStates.waiting_for_telegram))
async def process_telegram(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Telegram ID"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ Telegram ID
    telegram_id = message.text.strip()
    telegram_pattern = r'^@[a-zA-Z0-9_]{5,32}$'
    if not re.match(telegram_pattern, telegram_id) and telegram_id != str(message.from_user.id):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å @nickname –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π ID.")
        return

    await state.update_data(telegram_id=telegram_id)
    await state.set_state(RegistrationStates.waiting_for_photo)
    await message.answer("–ü—Ä–∏—à–ª–∏ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@router.message(StateFilter(RegistrationStates.waiting_for_photo), F.photo)
async def process_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
    photo_id = photo.file_id
    
    await state.update_data(photo_id=photo_id)
    await state.set_state(RegistrationStates.waiting_for_competencies)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:",
        reply_markup=keyboards.get_competencies_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ
@router.message(StateFilter(RegistrationStates.waiting_for_photo))
async def process_invalid_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ"""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–Ω–µ —Ñ–∞–π–ª –∏ –Ω–µ —Ç–µ–∫—Å—Ç).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
@router.callback_query(StateFilter(RegistrationStates.waiting_for_competencies))
async def process_competencies(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π"""
    if callback.data == "confirm_competencies":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        user_data = await state.get_data()
        competencies = user_data.get("competencies", [])
        
        if not competencies:
            await callback.message.answer("‚ùå –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é!")
            return
        
        await state.set_state(RegistrationStates.waiting_for_confirmation)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        competencies_text = "\n".join([f"‚Ä¢ {comp}" for comp in competencies])
        
        confirmation_text = (
            "üìã <b>–ü—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"<b>–§–ò–û:</b> {user_data.get('name')}\n"
            f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user_data.get('position')}\n"
            f"<b>Email:</b> {user_data.get('email')}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('phone')}\n"
            f"<b>Telegram ID:</b> {user_data.get('telegram_id')}\n\n"
            f"<b>–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:</b>\n{competencies_text}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if callback.message and callback.message.bot:
            bot = callback.message.bot
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=user_data.get('photo_id'),
                caption="–¢–≤–æ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"
            )
            
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.answer(
                confirmation_text,
                reply_markup=keyboards.get_confirm_keyboard()
            )
        else:
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            await callback.message.edit_text(
                confirmation_text,
                reply_markup=keyboards.get_confirm_keyboard()
            )
            
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
        await callback.answer()
    elif callback.data == "clear_competencies":
        # –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
        await state.update_data(competencies=[])
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:",
            reply_markup=keyboards.get_competencies_keyboard()
        )
        await callback.answer("üóë –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")
    else:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –≤ —Å–ø–∏—Å–æ–∫
        user_data = await state.get_data()
        competencies = user_data.get("competencies", [])
        
        competency = callback.data
        
        if competency not in competencies:
            competencies.append(competency)
            await state.update_data(competencies=competencies)
            await callback.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è: {competency}")
        else:
            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞
            competencies.remove(competency)
            await state.update_data(competencies=competencies)
            await callback.answer(f"‚ùå –£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è: {competency}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        selected = ", ".join(competencies) if competencies else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:\n\n–í—ã–±—Ä–∞–Ω–æ: {selected}",
            reply_markup=keyboards.get_competencies_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(StateFilter(RegistrationStates.waiting_for_confirmation))
async def confirm_data(callback: CallbackQuery, state: FSMContext, confirm_callback):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    if callback.data == "confirm":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        user_data = await state.get_data()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
        await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        success = await confirm_callback(callback.from_user.id, state)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É."
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.answer(
                "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=keyboards.get_main_keyboard()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=keyboards.get_confirm_keyboard()
            )
    else:  # cancel
        # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.edit_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(
            "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=keyboards.get_main_keyboard()
        )

def register_handlers(dp: Router, confirm_callback):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ"""
    # –°–æ–∑–¥–∞–µ–º –∑–∞–º—ã–∫–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å confirm_callback –≤ —Ñ—É–Ω–∫—Ü–∏—é
    async def confirm_data_wrapper(callback: CallbackQuery, state: FSMContext):
        return await confirm_data(callback, state, confirm_callback)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –Ω–∞—à–∏–º –≤—Ä–∞–ø–µ—Ä–æ–º
    router.callback_query.register(
        confirm_data_wrapper,
        StateFilter(RegistrationStates.waiting_for_confirmation)
    )
    
    # –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    handlers_to_remove = []
    for handler in router.callback_query.handlers:
        if getattr(handler.callback, "__name__", "") == "confirm_data":
            handlers_to_remove.append(handler)
    
    for handler in handlers_to_remove:
        router.callback_query.handlers.remove(handler)
    
    # –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp.include_router(router)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    await cmd_help(message) 