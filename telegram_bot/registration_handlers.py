import logging
import re
from typing import Dict, Union, Any, Optional

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database import BotDatabase
from states import RegistrationStates
import keyboards
from api_client import ApiClient
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
db = BotDatabase()
api_client = ApiClient()
config = Config()

# –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    staff = db.get_employee_by_telegram_id(user_id)
    
    if staff:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.\n"
            f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {staff.get('position_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=keyboards.get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    pending_request = db.get_pending_request_by_telegram_id(user_id)
    
    if pending_request:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            f"–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞. –¢–µ–±–µ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
            reply_markup=keyboards.get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    invitation_code = db.get_active_invitation_code(user_id)
    
    if invitation_code:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–¥–∞
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            f"–î–ª—è —Ç–µ–±—è —É–∂–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –µ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=keyboards.get_reset_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        await RegistrationStates.waiting_for_code.set(message)
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç OFS Global –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n"
        f"–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:",
        reply_markup=keyboards.get_registration_start_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
@router.message(F.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def registration_start(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = str(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    staff = db.get_employee_by_telegram_id(user_id)
    
    if staff:
        await message.answer(
            "‚úÖ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.",
            reply_markup=keyboards.get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    pending_request = db.get_pending_request_by_telegram_id(user_id)
    
    if pending_request:
        await message.answer(
            "‚è≥ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=keyboards.get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    invitation_code = db.get_active_invitation_code(user_id)
    
    if invitation_code:
        await message.answer(
            "üë®‚Äçüíº –î–ª—è —Ç–µ–±—è —É–∂–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –µ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=keyboards.get_reset_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        await state.set_state(RegistrationStates.waiting_for_code)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º telegram_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(telegram_id=user_id)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å username, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    if message.from_user.username:
        await state.update_data(telegram_username=message.from_user.username)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    full_name = f"{message.from_user.first_name}"
    if message.from_user.last_name:
        full_name += f" {message.from_user.last_name}"
    
    await state.update_data(user_full_name=full_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–º–µ–Ω–∏
    await state.set_state(RegistrationStates.waiting_for_name_confirmation)
    
    await message.answer(
        f"üë§ –¢–≤–æ–µ –∏–º—è –≤ Telegram: <b>{full_name}</b>\n\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏?",
        reply_markup=keyboards.get_yes_no_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–º–µ–Ω–∏
@router.message(StateFilter(RegistrationStates.waiting_for_name_confirmation), F.text.in_(["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]))
async def process_name_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.text == "‚úÖ –î–∞":
        # –ò–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        await state.set_state(RegistrationStates.waiting_for_position)
        
        await message.answer(
            "üëî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏:",
            reply_markup=keyboards.get_reset_keyboard()
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è
        await state.set_state(RegistrationStates.waiting_for_name)
        
        await message.answer(
            "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):",
            reply_markup=keyboards.get_reset_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = message.text.strip()
    
    if not name:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ (–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞)
    if len(name.split()) < 2:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è):",
            reply_markup=keyboards.get_reset_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(user_full_name=name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    await state.set_state(RegistrationStates.waiting_for_position)
    
    await message.answer(
        "üëî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏:",
        reply_markup=keyboards.get_reset_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
@router.message(StateFilter(RegistrationStates.waiting_for_position))
async def process_position(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    position = message.text.strip()
    
    if not position:
        await message.answer("‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(approximate_position=position)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    await state.set_state(RegistrationStates.waiting_for_request_confirmation)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    text = (
        f"üìù <b>–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n"
        f"<b>–ò–º—è:</b> {data['user_full_name']}\n"
        f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {data['approximate_position']}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:"
    )
    
    await message.answer(
        text,
        reply_markup=keyboards.get_confirm_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
@router.callback_query(StateFilter(RegistrationStates.waiting_for_request_confirmation))
async def process_request_confirmation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    action = callback.data
    
    if action not in ["confirm", "cancel"]:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        return
    
    if action == "cancel":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å
        await state.clear()
        
        await callback.message.edit_text(
            "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
            "–¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'."
        )
        
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboards.get_main_keyboard()
        )
        
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    request_data = {
        'telegram_id': data.get('telegram_id', ''),
        'telegram_username': data.get('telegram_username', ''),
        'user_full_name': data.get('user_full_name', ''),
        'approximate_position': data.get('approximate_position', '')
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    request_id = db.create_registration_request(request_data=request_data)
    
    if not request_id:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )
        
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboards.get_main_keyboard()
        )
        
        await callback.answer()
        await state.clear()
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ API –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    try:
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API, –∏—Å–ø–æ–ª—å–∑—É—è –∫–∞–∫ staff –≤–º–µ—Å—Ç–æ staff
        api_data = {
            'name': request_data['user_full_name'],
            'telegram_id': request_data['telegram_id'],
            'email': request_data.get('email', ''),
            'phone': request_data.get('phone', ''),
            'position': request_data.get('position', ''),
            'division': request_data.get('division', '')
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
        await api_client.create_staff(api_data)
        logger.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API: {api_data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ API: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    for admin_id in config.ADMIN_IDS:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            pass  # –†–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ admin_handlers.py
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.edit_text(
        "‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        "–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–¢—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—Å—è."
    )
    
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=keyboards.get_main_keyboard()
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
@router.message(StateFilter(RegistrationStates.waiting_for_code))
async def process_invitation_code(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥
    invitation_code = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ API
    validation_result = await api_client.validate_invitation_code(
        code=invitation_code,
        telegram_id=message.from_user.id
    )
    
    if validation_result.get("success"):
        # –ö–æ–¥ –≤–∞–ª–∏–¥–µ–Ω - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–¥–µ–ª–µ
        position = validation_result.get("position", {})
        division = validation_result.get("division", {})
        organization = validation_result.get("organization", {})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            invitation_code=invitation_code,
            position_id=position.get("id"),
            position_name=position.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å"),
            division_id=division.get("id") if division else None,
            division_name=division.get("name") if division else None,
            organization_id=organization.get("id", 1),
            organization_name=organization.get("name", "OFS Global")
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        division_text = f"\n<b>–û—Ç–¥–µ–ª:</b> {division.get('name')}" if division else ""
        
        await message.answer(
            f"‚úÖ <b>–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
            f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å')}"
            f"{division_text}\n\n"
            f"–¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=keyboards.get_skip_photo_keyboard()
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
        await state.set_state(RegistrationStates.waiting_for_photo)
    else:
        # –ö–æ–¥ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω - —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        error_message = validation_result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        
        await message.answer(
            f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!</b>\n\n"
            f"–û—à–∏–±–∫–∞: {error_message}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=keyboards.get_cancel_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å–∏—Ç—å"
@router.message(F.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å")
async def reset_registration(message: Message, state: FSMContext):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await message.answer(
        "üîÑ –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'.",
        reply_markup=keyboards.get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
@router.message(F.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
async def check_status(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    staff = db.get_employee_by_telegram_id(user_id)
    
    if staff:
        await message.answer(
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>\n\n"
            f"<b>–ò–º—è:</b> {staff.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {staff.get('position_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {staff.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
            reply_markup=keyboards.get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    pending_request = db.get_pending_request_by_telegram_id(user_id)
    
    if pending_request:
        status_text = "–û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"
        if pending_request.get('status') == 'approved':
            status_text = "–û–¥–æ–±—Ä–µ–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –∫–æ–¥–∞)"
        elif pending_request.get('status') == 'rejected':
            status_text = "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        
        await message.answer(
            f"‚è≥ <b>–°—Ç–∞—Ç—É—Å: –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞</b>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> {status_text}\n"
            f"<b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {pending_request.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
            reply_markup=keyboards.get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    invitation_code = db.get_active_invitation_code(user_id)
    
    if invitation_code:
        await message.answer(
            f"üîë <b>–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –∫–æ–¥–∞</b>\n\n"
            f"–î–ª—è —Ç–µ–±—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –µ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=keyboards.get_registration_start_keyboard()
        )
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –ø–æ–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É
    await message.answer(
        "‚ùì <b>–°—Ç–∞—Ç—É—Å: –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>\n\n"
        "–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –Ω–µ –ø–æ–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
        reply_markup=keyboards.get_registration_start_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–¥"
@router.message(F.text == "üîë –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–¥")
async def have_code(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    user_id = str(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    staff = db.get_employee_by_telegram_id(user_id)
    
    if staff:
        await message.answer(
            "‚úÖ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.",
            reply_markup=keyboards.get_main_keyboard()
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    await state.set_state(RegistrationStates.waiting_for_code)
    
    await message.answer(
        "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏:",
        reply_markup=keyboards.get_reset_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –±–æ—Ç–µ"
@router.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    await message.answer(
        "ü§ñ <b>–û –±–æ—Ç–µ</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ OFS Global.\n\n"
        "<b>–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n"
        "1. –ü–æ–¥–∞–π –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
        "2. –î–æ–∂–¥–∏—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "3. –í–≤–µ–¥–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–±–µ\n"
        "4. –ì–æ—Ç–æ–≤–æ! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
        "<b>–í–µ—Ä—Å–∏—è:</b> 1.0.0\n"
        "<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> OFS Global Technology Team",
        reply_markup=keyboards.get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –±–æ—Ç—É"""
    await message.answer(
        "‚ùì <b>–ü–æ–º–æ—â—å</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'\n"
        "2. –ó–∞–ø–æ–ª–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "3. –î–æ–∂–¥–∏—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        "4. –í–≤–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è\n\n"
        "<b>–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–¥:</b>\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üîë –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–¥' –∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n\n"
        "<b>–ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π?</b>\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–≤–æ–µ–≥–æ –æ—Ç–¥–µ–ª–∞.",
        reply_markup=keyboards.get_main_keyboard()
    )

def register_registration_handlers(dispatcher: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    dispatcher.include_router(router) 